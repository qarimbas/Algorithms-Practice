//Red-Black Tree (RBT) is a BST//we will always have h = O(lg n) for an RBT//Not every BST can be colored to form a RBT//RBT properties:/*1. Every node is red or black2. The root is black.3. Every leaf node is black(automatically guaranteed by using the	black RBT leaf nodes as the leaves).4. A red node always has two black children.5. Every path from the root to a leaf has the same number of black	nodes.*/RBT_Insert(T, x) { // T: the tree, x: a new node to be inserted	color[x] = RED; // the new node will be red	BST_Insert(T, x); // insert as if we were using an ordinary BST	FixColoring(T, x); // fix the “red-red” coloring problem if exists}/* - BST_Insert needs O(h) time. - FixColoring needs O(h) time. - Therefore, RBT_Insert needs O(h) time. - For RBTs, h=O(lg n). - Hence, RBT_Insert needs O(lg n) time.*/